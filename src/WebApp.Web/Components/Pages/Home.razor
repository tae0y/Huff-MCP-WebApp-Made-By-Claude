@page "/"
@using WebApp.Web.Services
@inject IAIService AIService
@rendermode InteractiveServer

<PageTitle>AI Chat</PageTitle>

<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">
                    <h3>ðŸ¤– AI Chat Assistant</h3>
                    <div class="mt-2">
                        <button class="btn btn-outline-primary btn-sm me-2" @onclick="@(() => SendSuggestion("who am I"))">
                            who am I
                        </button>
                        <button class="btn btn-outline-primary btn-sm" @onclick="@(() => SendSuggestion("create a pixelated image of a beaver"))">
                            create a pixelated image of a beaver
                        </button>
                    </div>
                </div>
                
                <div class="card-body chat-area" style="height: 400px; overflow-y: auto;">
                    @foreach (var message in chatHistory)
                    {
                        <div class="mb-3">
                            @if (message.IsUser)
                            {
                                <div class="d-flex justify-content-end">
                                    <div class="bg-primary text-white p-2 rounded" style="max-width: 70%;">
                                        <strong>You:</strong> @message.Content
                                    </div>
                                </div>
                            }
                            else
                            {
                                <div class="d-flex justify-content-start">
                                    <div class="bg-light p-2 rounded" style="max-width: 70%;">
                                        <strong>AI:</strong> @message.Content
                                        @if (message.ImageUrls?.Any() == true)
                                        {
                                            <div class="mt-2">
                                                @foreach (var imageUrl in message.ImageUrls)
                                                {
                                                    <img src="@imageUrl" alt="Generated image" class="img-fluid rounded mb-2" style="max-width: 300px;" />
                                                }
                                            </div>
                                        }
                                    </div>
                                </div>
                            }
                            <small class="text-muted">@message.Timestamp.ToString("HH:mm")</small>
                        </div>
                    }
                    
                    @if (isLoading)
                    {
                        <div class="d-flex justify-content-start">
                            <div class="bg-light p-2 rounded">
                                <strong>AI:</strong> <span class="spinner-border spinner-border-sm"></span> Thinking...
                            </div>
                        </div>
                    }
                </div>
                
                <div class="card-footer">
                    <div class="input-group">
                        <input @bind="currentMessage" @bind:event="oninput" @onkeypress="HandleKeyPress" 
                               class="form-control" placeholder="Type your message here..." 
                               disabled="@isLoading" />
                        <button class="btn btn-primary" @onclick="SendMessage" disabled="@(isLoading || string.IsNullOrWhiteSpace(currentMessage))">
                            @if (isLoading)
                            {
                                <span class="spinner-border spinner-border-sm me-2"></span>
                            }
                            Send
                        </button>
                    </div>
                </div>
            </div>
            
            @if (availableTools?.Any() == true)
            {
                <div class="card mt-3">
                    <div class="card-header">
                        <button class="btn btn-outline-secondary btn-sm" @onclick="ToggleToolsPanel">
                            MCP Tools (@availableTools.Count) 
                            @if (showTools) { <span>&uarr;</span> } else { <span>&darr;</span> }
                        </button>
                    </div>
                    @if (showTools)
                    {
                        <div class="card-body">
                            @foreach (var tool in availableTools)
                            {
                                <div class="mb-2">
                                    <strong>@tool.Name</strong>
                                    <p class="small text-muted mb-0">@tool.Description</p>
                                </div>
                            }
                        </div>
                    }
                </div>
            }
        </div>
    </div>
</div>

@code {
    private string currentMessage = string.Empty;
    private bool isLoading = false;
    private bool showTools = false;
    private List<ChatMessage> chatHistory = new();
    private List<AITool>? availableTools;

    protected override async Task OnInitializedAsync()
    {
        await LoadAvailableTools();
    }

    private async Task LoadAvailableTools()
    {
        try
        {
            availableTools = await AIService.GetAvailableToolsAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading tools: {ex.Message}");
        }
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(currentMessage) || isLoading) return;

        var userMessage = currentMessage.Trim();
        chatHistory.Add(new ChatMessage { Content = userMessage, IsUser = true, Timestamp = DateTime.Now });
        currentMessage = string.Empty;
        isLoading = true;
        StateHasChanged();

        try
        {
            var response = await AIService.SendMessageAsync(userMessage);
            
            if (response.IsError)
            {
                chatHistory.Add(new ChatMessage 
                { 
                    Content = $"Error: {response.ErrorMessage}", 
                    IsUser = false, 
                    Timestamp = DateTime.Now 
                });
            }
            else
            {
                chatHistory.Add(new ChatMessage 
                { 
                    Content = response.TextContent ?? string.Empty,
                    ImageUrls = response.ImageUrls,
                    IsUser = false, 
                    Timestamp = DateTime.Now 
                });
            }
        }
        catch (Exception ex)
        {
            chatHistory.Add(new ChatMessage 
            { 
                Content = $"Error: {ex.Message}", 
                IsUser = false, 
                Timestamp = DateTime.Now 
            });
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task SendSuggestion(string suggestion)
    {
        currentMessage = suggestion;
        await SendMessage();
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.ShiftKey)
        {
            await SendMessage();
        }
    }

    private void ToggleToolsPanel()
    {
        showTools = !showTools;
    }

    private class ChatMessage
    {
        public string Content { get; set; } = string.Empty;
        public List<string>? ImageUrls { get; set; }
        public bool IsUser { get; set; }
        public DateTime Timestamp { get; set; }
    }
}