@page "/"
@using WebApp.Web.Services
@inject IAIService AIService
@inject IJSRuntime JSRuntime

<PageTitle>AI Chat</PageTitle>

<div class="container-fluid h-100">
    <div class="row h-100">
        <div class="col-12">
            <div class="chat-container">
                <div class="chat-header">
                    <h3>AI Chat Assistant</h3>
                    <div class="suggestions">
                        <button class="btn btn-outline-primary btn-sm me-2" @onclick="() => SendSuggestion(\"who am I\")">
                            who am I
                        </button>
                        <button class="btn btn-outline-primary btn-sm" @onclick="() => SendSuggestion(\"create a pixelated image of a beaver\")">
                            create a pixelated image of a beaver
                        </button>
                    </div>
                </div>

                <div class="chat-messages" id="chat-messages">
                    @foreach (var message in chatHistory)
                    {
                        <div class="message @(message.IsUser ? "user-message" : "ai-message")">
                            <div class="message-content">
                                @if (message.IsUser)
                                {
                                    <strong>You:</strong> @message.Content
                                }
                                else
                                {
                                    <strong>AI:</strong>
                                    @if (!string.IsNullOrEmpty(message.Content))
                                    {
                                        <div class="text-content">@((MarkupString)message.Content)</div>
                                    }
                                    @if (message.ImageUrls?.Any() == true)
                                    {
                                        <div class="image-gallery">
                                            @foreach (var imageUrl in message.ImageUrls)
                                            {
                                                <div class="image-container">
                                                    <img src="@imageUrl" alt="Generated image" class="generated-image" 
                                                         @onclick="() => ViewFullImage(imageUrl)" />
                                                    <div class="image-actions">
                                                        <button class="btn btn-sm btn-outline-light" @onclick="() => ViewFullImage(imageUrl)">
                                                            View Full Size
                                                        </button>
                                                        <button class="btn btn-sm btn-outline-light" @onclick="() => CopyImageUrl(imageUrl)">
                                                            Copy URL
                                                        </button>
                                                    </div>
                                                </div>
                                            }
                                        </div>
                                    }
                                }
                            </div>
                            <div class="message-time">@message.Timestamp.ToString("HH:mm")</div>
                        </div>
                    }
                    @if (isLoading)
                    {
                        <div class="message ai-message">
                            <div class="message-content">
                                <strong>AI:</strong>
                                <div class="typing-indicator">
                                    <div class="typing-dot"></div>
                                    <div class="typing-dot"></div>
                                    <div class="typing-dot"></div>
                                </div>
                            </div>
                        </div>
                    }
                </div>

                <div class="chat-input">
                    <div class="input-group">
                        <input @bind="currentMessage" @onkeypress="HandleKeyPress" 
                               class="form-control" placeholder="Type your message here..." 
                               disabled="@isLoading" />
                        <button class="btn btn-primary" @onclick="SendMessage" disabled="@(isLoading || string.IsNullOrWhiteSpace(currentMessage))">
                            @if (isLoading)
                            {
                                <span class="spinner-border spinner-border-sm me-2"></span>
                            }
                            Send
                        </button>
                    </div>
                </div>

                @if (availableTools?.Any() == true)
                {
                    <div class="tools-panel mt-3">
                        <button class="btn btn-outline-secondary btn-sm" @onclick="ToggleToolsPanel">
                            @if (showTools) { <i class="bi bi-chevron-up"></i> } else { <i class="bi bi-chevron-down"></i> }
                            MCP Tools (@availableTools.Count)
                        </button>
                        @if (showTools)
                        {
                            <div class="tools-list mt-2">
                                @foreach (var tool in availableTools)
                                {
                                    <div class="tool-item">
                                        <strong>@tool.Name</strong>
                                        <p class="tool-description">@tool.Description</p>
                                    </div>
                                }
                            </div>
                        }
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private string currentMessage = string.Empty;
    private bool isLoading = false;
    private bool showTools = false;
    private List<ChatMessage> chatHistory = new();
    private List<AITool>? availableTools;

    protected override async Task OnInitializedAsync()
    {
        await LoadAvailableTools();
    }

    private async Task LoadAvailableTools()
    {
        try
        {
            availableTools = await AIService.GetAvailableToolsAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading tools: {ex.Message}");
        }
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(currentMessage) || isLoading) return;

        var userMessage = currentMessage.Trim();
        chatHistory.Add(new ChatMessage { Content = userMessage, IsUser = true, Timestamp = DateTime.Now });
        currentMessage = string.Empty;
        isLoading = true;
        StateHasChanged();

        try
        {
            var response = await AIService.SendMessageAsync(userMessage);
            
            if (response.IsError)
            {
                chatHistory.Add(new ChatMessage 
                { 
                    Content = $"Error: {response.ErrorMessage}", 
                    IsUser = false, 
                    Timestamp = DateTime.Now 
                });
            }
            else
            {
                chatHistory.Add(new ChatMessage 
                { 
                    Content = response.TextContent ?? string.Empty,
                    ImageUrls = response.ImageUrls,
                    IsUser = false, 
                    Timestamp = DateTime.Now 
                });
            }
        }
        catch (Exception ex)
        {
            chatHistory.Add(new ChatMessage 
            { 
                Content = $"Error: {ex.Message}", 
                IsUser = false, 
                Timestamp = DateTime.Now 
            });
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
            await ScrollToBottom();
        }
    }

    private async Task SendSuggestion(string suggestion)
    {
        currentMessage = suggestion;
        await SendMessage();
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.ShiftKey)
        {
            await SendMessage();
        }
    }

    private void ToggleToolsPanel()
    {
        showTools = !showTools;
    }

    private async Task ViewFullImage(string imageUrl)
    {
        await JSRuntime.InvokeVoidAsync("window.open", imageUrl, "_blank");
    }

    private async Task CopyImageUrl(string imageUrl)
    {
        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", imageUrl);
    }

    private async Task ScrollToBottom()
    {
        await JSRuntime.InvokeVoidAsync("scrollToBottom", "chat-messages");
    }

    private class ChatMessage
    {
        public string Content { get; set; } = string.Empty;
        public List<string>? ImageUrls { get; set; }
        public bool IsUser { get; set; }
        public DateTime Timestamp { get; set; }
    }
}

<style>
    .chat-container {
        display: flex;
        flex-direction: column;
        height: 100vh;
        max-width: 1200px;
        margin: 0 auto;
    }

    .chat-header {
        padding: 1rem;
        border-bottom: 1px solid #dee2e6;
        background-color: #f8f9fa;
    }

    .suggestions {
        margin-top: 0.5rem;
    }

    .chat-messages {
        flex: 1;
        overflow-y: auto;
        padding: 1rem;
        background-color: #ffffff;
    }

    .message {
        margin-bottom: 1rem;
        display: flex;
        flex-direction: column;
    }

    .user-message {
        align-items: flex-end;
    }

    .ai-message {
        align-items: flex-start;
    }

    .message-content {
        max-width: 70%;
        padding: 0.75rem 1rem;
        border-radius: 1rem;
        word-wrap: break-word;
    }

    .user-message .message-content {
        background-color: #007bff;
        color: white;
    }

    .ai-message .message-content {
        background-color: #f1f3f4;
        color: #333;
    }

    .message-time {
        font-size: 0.75rem;
        color: #6c757d;
        margin-top: 0.25rem;
    }

    .chat-input {
        padding: 1rem;
        border-top: 1px solid #dee2e6;
        background-color: #f8f9fa;
    }

    .typing-indicator {
        display: flex;
        align-items: center;
        gap: 0.25rem;
    }

    .typing-dot {
        width: 8px;
        height: 8px;
        border-radius: 50%;
        background-color: #6c757d;
        animation: typing 1.4s infinite ease-in-out;
    }

    .typing-dot:nth-child(1) { animation-delay: -0.32s; }
    .typing-dot:nth-child(2) { animation-delay: -0.16s; }

    @keyframes typing {
        0%, 80%, 100% { 
            transform: scale(0);
            opacity: 0.5;
        } 
        40% { 
            transform: scale(1);
            opacity: 1;
        }
    }

    .image-gallery {
        margin-top: 0.5rem;
    }

    .image-container {
        position: relative;
        display: inline-block;
        margin: 0.25rem;
    }

    .generated-image {
        max-width: 300px;
        max-height: 300px;
        border-radius: 0.5rem;
        cursor: pointer;
        transition: transform 0.2s;
    }

    .generated-image:hover {
        transform: scale(1.05);
    }

    .image-actions {
        position: absolute;
        bottom: 0.5rem;
        left: 0.5rem;
        right: 0.5rem;
        display: flex;
        gap: 0.25rem;
        opacity: 0;
        transition: opacity 0.2s;
    }

    .image-container:hover .image-actions {
        opacity: 1;
    }

    .tools-panel {
        padding: 1rem;
        border-top: 1px solid #dee2e6;
        background-color: #f8f9fa;
    }

    .tools-list {
        max-height: 200px;
        overflow-y: auto;
    }

    .tool-item {
        padding: 0.5rem;
        border: 1px solid #dee2e6;
        border-radius: 0.25rem;
        margin-bottom: 0.5rem;
        background-color: white;
    }

    .tool-description {
        margin: 0;
        font-size: 0.85rem;
        color: #6c757d;
    }

    .text-content {
        white-space: pre-wrap;
    }
</style>

<script>
    window.scrollToBottom = (elementId) => {
        const element = document.getElementById(elementId);
        if (element) {
            element.scrollTop = element.scrollHeight;
        }
    };
</script>